A library to output higher quality backtraces if an unhandled exception is raised


ex:


running script crash.rb with contents:
def go2(a, b)
 raise
end

def go(a);
 go2(a, 55);
end

go '3'
yields:
C:\dev\ruby\ruby_backtracer>ruby -rbacktrace_with_code_and_locals crash.rb

unhandled exception: crash.rb:2:   raise
        locals: {"a"=>"3", "b"=>55}
          from:
        crash.rb:1 go2(a=>3, b=>55)
                locals: {"a"=>"3", "b"=>55}
        crash.rb:5 go(a=>3)
                locals: {"a"=>"3"}

Wasn't that pretty?

There are several options allowed, if you don't want as much output.  Given by different script names.

backtrace_nothing_swallowed.rb is the same as the typical exception output, except it doesn't have the ...skip 24 lines... output in the middle. No speed slowdown.



try them all out, some are more verbose than others.

Note also that you could require one of these files 'in the middle of your script' and it would track thread backtraces from then on

Note: some options depends on ruby-debug [MRI] gem

related projects: unroller, this: http://eigenclass.org/hiki/method+arguments+via+introspection, liveconsole
