A library to output higher quality backtraces if an unhandled exception is raised


ex:


running script crash.rb that has contents:
def go2(a, b)
 raise
end

def go(a);
 go2(a, 55);
end

go '3'

yields:
C:\dev\ruby\ruby_backtracer\examples>ruby -r../backtrace_with_code_and_locals crash.rb

unhandled exception: crash.rb:2:   raise
        locals: {"a"=>"3", "b"=>55}
          from:
        crash.rb:1 go2(a=>3, b=>55)
                locals: {"a"=>"3", "b"=>55}
        crash.rb:5 go(a=>3)
                locals: {"a"=>"3"}

Wasn't that prettier than the default output:
crash.rb:2:in `go2': unhandled exception
        from crash.rb:6:in `go'
        from crash.rb:9
?

There are several other options allowed, if you don't want as much output, or want more speed.  Specify by script name.

backtrace_nothing_swallowed.rb is the same as the typical exception output, except it doesn't have the ...skip 24 lines... output in the middle. No speed slowdown.


Try them out by running test_all.rb in the examples folder, or eyeball the output files there.

Note also that you could require one of these files 'in the middle of your script' and it would track parameters and calls from then on.(i.e. if you entered some exception case you could require the file around that time, to avoid slowdown before that).

Note: some options depends on ruby-debug [MRI] gem, some don't.

related projects: unroller, this: http://eigenclass.org/hiki/method+arguments+via+introspection, liveconsole
